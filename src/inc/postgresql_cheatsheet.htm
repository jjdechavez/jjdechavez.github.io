<h2>PostgreSQL Cheatsheet</h2>

<h3 id="json"><a href="#json">JSON</a></h3>

<h4 id="json_access">
  <a href="#json_access"
    >Access property from json object with "->" and "->>"</a
  >
</h4>

<ul>
  <li><strong>-&gt;</strong> operator returns JSON object field by key.</li>
  <li>
    <strong>-&gt;&gt;</strong> operator returns JSON object field by text.
  </li>
</ul>

<pre>
-- get stakeholder on courier, get nested object
SELECT
  c."courierName",
  c."data"->'stakeholder'->>'primaryEmail' as "courierEmail"
FROM couriers c
WHERE c.id = '891e6dc3-141a-4bf6-bbcf-5407009ecefc'
</pre>

<h4 id="query_json_column">
  <a href="#query_json_column"
    >Query from json column that has array of object value</a
  >
</h4>

<pre>
SELECT q.id, j
FROM quotes q
   CROSS JOIN LATERAL JSON_ARRAY_ELEMENTS(q."jsonResponse") as j
WHERE j->>'shipmentMode' LIKE 'Roa%';
</pre>

<h4 id="append_array_of_object">
  <a href="#append_array_of_object"
    >Append array of object on array of object column</a
  >
</h4>

<pre>
-- Append new delta_listing_boxes
UPDATE order_line_item
SET delta_listing_boxes = (
  CASE
    WHEN delta_listing_boxes IS NULL THEN '[]'::JSONB
    ELSE delta_listing_boxes
  END
) || '[{"id": "d9923cc3-dd17-44f7-9f9b-ce4740725ed9","count": null,"weight": 5,"quantity": 4}]'::JSONB
WHERE id = '1e7db4b9-658f-4322-9115-a685b3e1946d';
</pre>

<h3 id="relations"><a href="#relations">Relations</a></h3>

<h4 id="relations_get_latest_left_join">
  <a href="#relations_get_latest_left_join">Get latest left join row</a>
</h4>

<pre>
...
LEFT JOIN
  order_adjustment oa ON o.id = oa.order_id
  AND oa.created_at = (
    SELECT MAX(created_at) -- Filter with latest created_at
    FROM order_adjustment oa2
    WHERE oa2.order_id  = o.id
  )
...
</pre>

<h3 id="filtering"><a href="#filtering">Filtering</a></h3>

<h4 id="filter_with_exists">
  <a href="#filter_with_exists">Filter with EXISTS</a>
</h4>

<pre>
EXISTS (
  SELECT 1 FROM product_variant pv 
  WHERE pv.product_id = product.id 
  AND (
    pv.title ILIKE $3 OR 
    pv.sku ILIKE $3
  )
)
</pre>

<p>This is a SQL <strong>EXISTS</strong> subquery that:</p>

<ol>
  <li>
    Checks if there are any product variants (product_variant) associated with
    the current product that match the search criteria
  </li>
  <li>Returns true if at least one variant is found that matches either:</li>
  <ul>
    <li>The variant's title matches the search query (case-insensitive)</li>
    <li>The variant's SKU matches the search query (case-insensitive)</li>
  </ul>
</ol>

<p>The <strong>EXISTS</strong> operator is particulary useful because:</p>

<ul>
  <li>
    It stops searching as soon as it finds a single matching record (more
    efficient than counting all matches)
  </li>
  <li>Returns a boolean value (true/false)</li>
  <li>
    Is commonly used for checking relationships without needing to return the
    actual matching records
  </li>
</ul>

<p>
  In the context of your search, this means a product will be included in the
  results if either:
</p>

<ul>
  <li>The product's title matches the search query</li>
  <li>The product's description matches the search query</li>
  <li>OR any of its variants' titles or SKUs match the search query</li>
</ul>

<p>
  The SELECT 1 inside the EXISTS clause is just a convention - it could be any
  value since EXISTS only cares whether any rows are returned, not what values
  those rows contain.
</p>

<h3 id="tips"><a href="#tips">Tips</a></h3>

<h4 id="update_duplicate_recent_row">
  <a href="#update_duplicate_recent_row"
    >Working with duplicate data and how to update the recent/latest row</a
  >
</h4>

<pre>
-- Common Table Expression or CTE
WITH LatestSubscriptions AS (
  SELECT
    ROW_NUMBER() OVER (PARTITION BY cs.company_id, cs.subscription_plan_id ORDER BY cs.starts_at DESC) AS row_num,
	c.name as company_name, sc.stripe_customer, sp.alias as plan_name, cs.*
  FROM
    stripe_customer sc
    LEFT JOIN company_subscription cs ON cs.company_id = sc.company_id
    LEFT JOIN subscription_plan sp ON sp.id = cs.subscription_plan_id
    LEFT JOIN company c ON cs.company_id = c.id
  WHERE
    sp.alias IN ('BASE', 'FEATURE_REVERSED_MARKETPLACE', 'FEATURE_REVERSED_MARKETPLACE_SELLER')
)
SELECT * FROM LatestSubscriptions;

-- Use this when trying to update the rows
UPDATE company_subscription
SET renews_at = NULL
FROM LatestSubscriptions
WHERE LatestSubscriptions.row_num > 1 and company_subscription.id = LatestSubscriptions.id;
</pre>

<h3 id="types_enums"><a href="#types_enums">Types/Enums</a></h3>

<p>Common pattern when working with types or Enum</p>

<pre>
-- Create enum packaging_type
CREATE TYPE packaging_type AS ENUM ('BOX', 'CARTON', 'TRAY');

-- Adding value on enum
ALTER TYPE packaging_type ADD VALUE IF NOT EXISTS 'PACKET';

-- Rename carton enum
ALTER TYPE packaging_type RENAME VALUE 'CARTON' TO 'CARTONS';

-- List value by array
select enum_range(null::packaging_type);

-- List value by rows
select unnest(enum_range(null, null::packaging_type));
</pre>

<h4 id="listing_enums_with_pg_type">
  <a href="#listing_enums_with_pg_type">Listing Enums with pg_type</a>
</h4>

<pre>
-- Query oid of enum_listing_packaging_type
SELECT oid FROM pg_type WHERE typname = 'enum_listing_box_packaging_type'

-- Query all data about enum
SELECT * FROM pg_type WHERE typname = 'enum_listing_packaging_type'

-- List of enum values with oid from pg_type
SELECT * FROM pg_enum pe WHERE pe.enumtypid = 94076
</pre>

<h3 id="enums_aggregation_patterns">
  <a href="#enums_aggregation_patterns">Enums Aggregation Patterns</a>
</h3>

<h4 id="enums_group_by_type_with_list">
  <a href="#enums_group_by_type_with_list"
    >Group by column and aggregate all results</a
  >
</h4>

<pre>
-- Create ENUM Type
CREATE TYPE packaging_type AS ENUM ('BOX', 'CARTON', 'TRAY');

-- Create Table
CREATE TABLE listing_packaging (
	id SERIAL PRIMARY KEY,
	label VARCHAR(255),
	type packaging_type,
	company_id UUID
);

-- Group by type and aggregate labels
SELECT
  lp."type",
  array_agg(lp.label) as "labels"
FROM listing_packaging lp
GROUP BY lp.type;

-- Result: Group by type and aggregate labels
|type   |labels                     |
|-------|---------------------------|
|PACKET |{1kg}                      |
|CARTON |{"22L Carton","32L Carton"}|
|BOX    |{"2kg Box","1kg Box"}      |
|TRAY   |{"18L Tray"}               |
</pre>

<h4 id="postgres_enums_group_by_type_check_has_value">
  <a href="#postgres_enums_group_by_type_check_has_value"
    >Group by column and aggregate if column has value</a
  >
</h4>

<pre>
-- Group by type and aggregate has custom packaging by sum() and case
SELECT
  lp."type",
  SUM(CASE WHEN lp.company_id IS NOT NULL THEN 1 ELSE 0 END) > 0 AS "has_custom"
FROM listing_packaging lp
GROUP BY lp.type;

-- Result: Group by type and aggregate has custom packaging by sum() and case
|type  |has_custom|
|------|----------|
|TRAY  |false     |
|CARTON|false     |
|PACKET|false     |
|BOX   |true      |

</pre>

<h3 id="dumping_and_restore">
  <a href="#dumping_and_restore">Dump and Restore</a>
</h3>

<p>How to create a copy of your database with <strong>pg_dump</strong>.</p>

<pre>
pg_dump --verbose --host=0.0.0.0 --port=5432 --username=postgres -f /database/dump.sql --dbname=my_database
</pre>

<p>To restore/use your dump database we can use <strong>psql</strong>.</p>

<pre>
psql -U postgres -h 0.0.0.0 -d my_new_db -f ./dump.sql
</pre>

<h3 id="psql"><a href="#psql">psql</a></h3>

<p><strong>psql</strong> is the PostgreSQL interactive terminal.</p>

<p>Here are the common command I use</p>

<ul>
  <li><strong>/l</strong>: List of databases</li>
  <li><strong>/c {db-name}</strong>: Connect specific database</li>
  <li><strong>/dS {table-name}</strong>: Detail properties of the table</li>
  <li><strong>/dT+ {type/enum-name}</strong>: Detail type/enum with values</li>
  <li>
    <strong>psql -U {user_name} -d {database_name} < file.sql</strong>: Run SQL
    file to psql
  </li>
</ul>

<h3 id="references"><a href="#references">References</a></h3>

<ul>
  <li>
    <a
      href="https://stackoverflow.com/questions/40706435/how-can-i-search-object-values-inside-an-array-with-postgres-jsonb"
      target="_blank"
      >Postgres: search object values inside an array of object</a
    >
  </li>
</ul>
